// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Robot {
  id Int @id @default(sequence())

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  robotName String @unique @db.String(255)

  robotAddress String? @unique @db.String(255)

  socketID String? @unique @db.String(255)

  connected Boolean @default(false)

  user UserAccount @relation(fields: [userID], references: [id], onDelete: Cascade)

  userID Int

  logs Log[]

  jobs Job[]
}

enum UserType {
  ADMIN
  TENANT
}

model UserAccount {
  id Int @id @default(sequence())

  uuid String @unique @db.Uuid

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  username String @unique

  email String @unique

  password String?

  firstName String? @db.String(20)

  lastName String? @db.String(20)

  userType UserType @default(TENANT)

  externalID String?

  externalProvider String? @db.String(25)

  admin UserAccount? @relation("UserAccount", fields: [adminID], references: [id])

  adminID Int?

  userAccounts UserAccount[] @relation("UserAccount")

  userLicense UserLicense? @relation("UserLicenseUserAccount")

  adminLicenses UserLicense[] @relation("UserLicenseAdminUserAccount")

  robots Robot[]

  packages Package[]

  jobs Job[]
}

model Package {
  id Int @id @default(sequence())

  name String @unique @db.String(255)

  description String? @unique @db.String(255)

  uploadDate DateTime @default(now())

  packageUrl String? @unique @db.String(255)

  user UserAccount @relation(fields: [userID], references: [id], onDelete: Cascade)

  userID Int

  jobs Job[]
}

model ScheduledPackage {
  packagedName String @unique @db.String(255)

  date String
}

model Job {
  id Int @id @default(sequence())

  date String

  time String

  dateReceived DateTime

  status String?

  package Package @relation(fields: [packageID], references: [id], onDelete: Cascade)

  packageID Int

  robot Robot @relation(fields: [robotID], references: [id], onDelete: Cascade)

  robotID Int

  user UserAccount @relation(fields: [userID], references: [id], onDelete: Cascade)

  userID Int
}

model Log {
  id Int @id @default(sequence())

  logType String

  emittingEntity String? @db.String(255)

  status String? @db.String(20)

  timestamp DateTime @default(now())

  message String? @db.String(255)

  robot Robot @relation(fields: [robotId], references: [id], onDelete: Cascade)

  robotId Int
}

model UserLicense {
  id Int @id @default(sequence())

  admin UserAccount @relation("UserLicenseAdminUserAccount", fields: [adminID], references: [id], onDelete: Cascade)

  adminID Int

  user UserAccount @relation("UserLicenseUserAccount", fields: [userID], references: [id], onDelete: Cascade)

  userID Int @unique

  license License @relation(fields: [licenseID], references: [id], onDelete: Cascade)

  licenseID Int

  startDate DateTime

  endDate DateTime
}

model License {
  id Int @id @default(sequence())

  title String @db.String(50)

  maxTenants Int?

  maxPackages Int?

  userLicenses UserLicense[]
}

model Library {

  id    Int @id @default(sequence()) 

  name   String   

  version String 

  link String
  
  description String 

}